// Text Direction - ltr / rtl
//
// CSS defaults to use the ltr css, and adds [dir=rtl] selectors
// to override ltr defaults.
// ----------------------------------------------------------

@mixin multi-dir() {
  @content;

  // $root: #{&};
  // @at-root [dir] {
  //   #{$root} {
  //     @content;
  //   }
  // }
}

@mixin rtl() {
  $root: #{&};

  @at-root #{add-root-selector($root, "[dir=rtl]")} {
    @content;
  }
}

@mixin ltr() {
  @content;
}

// Add property horizontal
// @param {string} $start
// @param {string} $end
// ----------------------------------------------------------
@mixin property-horizontal($prop, $start, $end: $start) {
  @if $start == 0 and $end == 0 {
    #{$prop}-left: $start;
    #{$prop}-right: $end;

  } @else {
    #{$prop}-left: $start;
    #{$prop}-right: $end;

    @at-root {
      @supports ((margin-inline-start: 0) or (-webkit-margin-start: 0)) {
        & {
          @if $start != null {
            #{$prop}-left: unset;
          }
          @if $end != null {
            #{$prop}-right: unset;
          }

          -webkit-#{$prop}-start: $start;
          #{$prop}-inline-start: $start;
          -webkit-#{$prop}-end: $end;
          #{$prop}-inline-end: $end;
        }
      }
    }
  }
}

// Add property for all directions
// @param {string} $prop
// @param {string} $top
// @param {string} $end
// @param {string} $bottom
// @param {string} $start
// @param {boolean} $content include content or use default
// ----------------------------------------------------------
@mixin property($prop, $top, $end: $top, $bottom: $top, $start: $end) {
  @include property-horizontal($prop, $start, $end);
  #{$prop}-top: $top;
  #{$prop}-bottom: $bottom;
}

// Add margin horizontal
// @param {string} $start
// @param {string} $end
// ----------------------------------------------------------
@mixin margin-horizontal($start, $end: $start) {
  @include property-horizontal(margin, $start, $end);
}

// Add margin for all directions
// @param {string} $top
// @param {string} $end
// @param {string} $bottom
// @param {string} $start
// ----------------------------------------------------------
@mixin margin($top, $end: $top, $bottom: $top, $start: $end) {
  @include property(margin, $top, $end, $bottom, $start);
}

// Add padding for all directions
// @param {string} $top
// @param {string} $end
// @param {string} $bottom
// @param {string} $start
// ----------------------------------------------------------
@mixin padding($top, $end: $top, $bottom: $top, $start: $end) {
  @include property(padding, $top, $end, $bottom, $start);
}

// Add border radius for all directions
// @param {string} $top-start
// @param {string} $top-end
// @param {string} $bottom-end
// @param {string} $bottom-start
// ----------------------------------------------------------
@mixin border-radius($top-start, $top-end: $top-start, $bottom-end: $top-start, $bottom-start: $top-end) {
  @if $top-start == $top-end and $top-start == $bottom-end and $top-start == $bottom-start {
    @include multi-dir() {
      border-radius: $top-start;
    }
  } @else {
    @include ltr() {
      border-top-left-radius: $top-start;
      border-top-right-radius: $top-end;
      border-bottom-right-radius: $bottom-end;
      border-bottom-left-radius: $bottom-start;
    }

    @include rtl() {
      border-top-left-radius: $top-end;
      border-top-right-radius: $top-start;
      border-bottom-right-radius: $bottom-start;
      border-bottom-left-radius: $bottom-end;
    }
  }
}

// Add position horizontal
// @param {string} $start - amount to position start
// @param {string} $end - amount to left: 0; end
// ----------------------------------------------------------
@mixin position-horizontal($start: null, $end: null) {
  @if $start == $end {
    @include multi-dir() {
      left: $start;
      right: $end;
    }
  } @else {
    @include ltr() {
      left: $start;
      right: $end;
    }
    @include rtl() {
      left: unset;
      right: unset;

      left: $end;
      right: $start;
    }
  }
}

// Add position for all directions
// @param {string} $top
// @param {string} $end
// @param {string} $bottom
// @param {string} $start
// ----------------------------------------------------------
@mixin position($top: null, $end: null, $bottom: null, $start: null) {
  @include position-horizontal($start, $end);
  top: $top;
  bottom: $bottom;
}

// Font smoothing
// --------------------------------------------------

@mixin font-smoothing() {
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
}

@mixin transform-origin($x-axis, $y-axis: null) {
  @if $x-axis == start {
    @include ltr() {
      transform-origin: left $y-axis;
    }
    @include rtl() {
      transform-origin: right $y-axis;
    }
  } @else if $x-axis == end {
    @include ltr() {
      transform-origin: right $y-axis;
    }
    @include rtl() {
      transform-origin: left $y-axis;
    }
  } @else if $x-axis == left or $x-axis == right {
    @include multi-dir() {
      transform-origin: $x-axis $y-axis;
    }
  } @else {
    @include ltr() {
      transform-origin: $x-axis $y-axis;
    }
    @include rtl() {
      transform-origin: calc(100% - #{$x-axis}) $y-axis;
    }
  }
}

// Add transform for all directions
// @param {string} $transforms - comma separated list of transforms
@mixin transform($transforms...) {
  $extra: null;

  $x: null;
  $ltr-translate: null;
  $rtl-translate: null;

  @each $transform in $transforms {
    @if (str-index($transform, translate3d)) {
      $transform: str-replace($transform, 'translate3d(');
      $transform: str-replace($transform, ')');

      $coordinates: str-split($transform, ',');

      $x: nth($coordinates, 1);
      $y: nth($coordinates, 2);
      $z: nth($coordinates, 3);

      $ltr-translate: translate3d($x, $y, $z);
      $rtl-translate: translate3d(calc(-1 * #{$x}), $y, $z);
    } @else {
      @if $extra == null {
        $extra: $transform;
      } @else {
        $extra: $extra $transform;
      }
    }
  }

  @if $x == '0' or $x == null {
    @include multi-dir() {
      transform: $ltr-translate $extra;
    }
  } @else {
    @include ltr() {
      transform: $ltr-translate $extra;
    }

    @include rtl() {
      transform: $rtl-translate $extra;
    }
  }
}

@mixin input-cover() {
  @include position(0, null, null, 0);
  @include margin(0);

  position: absolute;

  width: 100%;
  height: 100%;

  border: 0;
  background: transparent;
  cursor: pointer;

  appearance: none;
  outline: none;

  &::-moz-focus-inner {
    border: 0;
  }
}
