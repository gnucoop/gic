/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { ActionSheetButton, AnimationBuilder, ComponentProps, ComponentRef, FrameworkDelegate, OverlayEventDetail, PopoverAttributes, PopoverSize, PositionAlign, PositionReference, PositionSide, StyleEventDetail, TriggerAction } from "@ionic/core";
import { AlertButton, AlertInput, AutocompletePopoverOption, SelectChangeEventDetail, SelectInterface, SelectPopoverOption } from "./interface";
import { SelectCompareFn } from "./components/select/select-interface";
export namespace Components {
    interface GicActionSheet {
        /**
          * If `true`, the action sheet will animate.
         */
        "animated": boolean;
        /**
          * If `true`, the action sheet will be dismissed when the backdrop is clicked.
         */
        "backdropDismiss": boolean;
        /**
          * An array of buttons for the action sheet.
         */
        "buttons": (ActionSheetButton | string)[];
        /**
          * Additional classes to apply for custom CSS. If multiple classes are provided they should be separated by spaces.
         */
        "cssClass"?: string | string[];
        /**
          * Dismiss the action sheet overlay after it has been presented.
          * @param data Any data to emit in the dismiss events.
          * @param role The role of the element that is dismissing the action sheet. This can be useful in a button handler for determining which button was clicked to dismiss the action sheet. Some examples include: ``"cancel"`, `"destructive"`, "selected"`, and `"backdrop"`.
         */
        "dismiss": (data?: any, role?: string | undefined) => Promise<boolean>;
        /**
          * Animation to use when the action sheet is presented.
         */
        "enterAnimation"?: AnimationBuilder;
        /**
          * Title for the action sheet.
         */
        "header"?: string;
        /**
          * If `true`, the keyboard will be automatically dismissed when the overlay is presented.
         */
        "keyboardClose": boolean;
        /**
          * Animation to use when the action sheet is dismissed.
         */
        "leaveAnimation"?: AnimationBuilder;
        /**
          * Returns a promise that resolves when the action sheet did dismiss.
         */
        "onDidDismiss": () => Promise<OverlayEventDetail>;
        /**
          * Returns a promise that resolves when the action sheet will dismiss.
         */
        "onWillDismiss": () => Promise<OverlayEventDetail>;
        "overlayIndex": number;
        /**
          * Present the action sheet overlay after it has been created.
         */
        "present": () => Promise<void>;
        /**
          * If `true`, the action sheet will show a searchbar for radios and checkboxes
         */
        "searchBar": boolean;
        /**
          * The current search string
         */
        "searchString"?: string | null;
        /**
          * Subtitle for the action sheet.
         */
        "subHeader"?: string;
        /**
          * If `true`, the action sheet will be translucent. Only applies when the mode is `"ios"` and the device supports [`backdrop-filter`](https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter#Browser_compatibility).
         */
        "translucent": boolean;
        /**
          * If `true`, the action sheet will use a virtual scroll to render radios and checkboxes
         */
        "useVirtualScroll": boolean;
    }
    interface GicAlert {
        /**
          * If `true`, the alert will animate.
         */
        "animated": boolean;
        /**
          * If `true`, the alert will be dismissed when the backdrop is clicked.
         */
        "backdropDismiss": boolean;
        /**
          * Array of buttons to be added to the alert.
         */
        "buttons": (AlertButton | string)[];
        /**
          * Additional classes to apply for custom CSS. If multiple classes are provided they should be separated by spaces.
         */
        "cssClass"?: string | string[];
        /**
          * Dismiss the alert overlay after it has been presented.
          * @param data Any data to emit in the dismiss events.
          * @param role The role of the element that is dismissing the alert. This can be useful in a button handler for determining which button was clicked to dismiss the alert. Some examples include: ``"cancel"`, `"destructive"`, "selected"`, and `"backdrop"`.
         */
        "dismiss": (data?: any, role?: string | undefined) => Promise<boolean>;
        /**
          * Animation to use when the alert is presented.
         */
        "enterAnimation"?: AnimationBuilder;
        /**
          * The main title in the heading of the alert.
         */
        "header"?: string;
        /**
          * Array of input to show in the alert.
         */
        "inputs": AlertInput[];
        /**
          * If `true`, the keyboard will be automatically dismissed when the overlay is presented.
         */
        "keyboardClose": boolean;
        /**
          * Animation to use when the alert is dismissed.
         */
        "leaveAnimation"?: AnimationBuilder;
        /**
          * The main message to be displayed in the alert. `message` can accept either plaintext or HTML as a string. To display characters normally reserved for HTML, they must be escaped. For example `<Ionic>` would become `&lt;Ionic&gt;`  For more information: [Security Documentation](https://ionicframework.com/docs/faq/security)
         */
        "message"?: string;
        /**
          * The mode determines which platform styles to use.
         */
        "mode"?: "ios" | "md";
        /**
          * Returns a promise that resolves when the alert did dismiss.
         */
        "onDidDismiss": () => Promise<OverlayEventDetail>;
        /**
          * Returns a promise that resolves when the alert will dismiss.
         */
        "onWillDismiss": () => Promise<OverlayEventDetail>;
        "overlayIndex": number;
        /**
          * Present the alert overlay after it has been created.
         */
        "present": () => Promise<void>;
        /**
          * If `true`, the alert will show a searchbar for radios and checkboxes
         */
        "searchBar": boolean;
        /**
          * The current search string
         */
        "searchString"?: string | null;
        /**
          * The subtitle in the heading of the alert. Displayed under the title.
         */
        "subHeader"?: string;
        /**
          * If `true`, the alert will be translucent. Only applies when the mode is `"ios"` and the device supports [`backdrop-filter`](https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter#Browser_compatibility).
         */
        "translucent": boolean;
        /**
          * If `true`, the alert will use a virtual scroll to render radios and checkboxes
         */
        "useVirtualScroll": boolean;
    }
    interface GicAutocomplete {
        /**
          * Any additional options that the `popover` interface can take. See the [PopoverController API docs](../../popover/PopoverController/#create) for the create options for each interface.
         */
        "interfaceOptions": any;
        "placeholder"?: string;
        "value": string | null;
    }
    interface GicAutocompleteOption {
        /**
          * The text value of the option.
         */
        "value"?: any | null;
    }
    interface GicAutocompletePopover {
        /**
          * Array of options for the popover
         */
        "options": AutocompletePopoverOption[];
        "searchStr"?: string;
    }
    interface GicPopover {
        /**
          * Describes how to align the popover content with the `reference` point.
         */
        "alignment": PositionAlign;
        /**
          * If `true`, the popover will animate.
         */
        "animated": boolean;
        /**
          * If `true`, the popover will display an arrow that points at the `reference` when running in `ios` mode on mobile. Does not apply in `md` mode or on desktop.
         */
        "arrow": boolean;
        /**
          * If `true`, the popover will be dismissed when the backdrop is clicked.
         */
        "backdropDismiss": boolean;
        /**
          * The component to display inside of the popover. You only need to use this if you are not using a JavaScript framework. Otherwise, you can just slot your component inside of `ion-popover`.
         */
        "component"?: ComponentRef;
        /**
          * The data to pass to the popover component. You only need to use this if you are not using a JavaScript framework. Otherwise, you can just set the props directly on your component.
         */
        "componentProps"?: ComponentProps;
        /**
          * Additional classes to apply for custom CSS. If multiple classes are provided they should be separated by spaces.
         */
        "cssClass"?: string | string[];
        "delegate"?: FrameworkDelegate;
        /**
          * Dismiss the popover overlay after it has been presented.
          * @param data Any data to emit in the dismiss events.
          * @param role The role of the element that is dismissing the popover. For example, 'cancel' or 'backdrop'.
          * @param dismissParentPopover If `true`, dismissing this popover will also dismiss a parent popover if this popover is nested. Defaults to `true`.
         */
        "dismiss": (data?: any, role?: string | undefined, dismissParentPopover?: boolean) => Promise<boolean>;
        /**
          * If `true`, the popover will be automatically dismissed when the content has been clicked.
         */
        "dismissOnSelect": boolean;
        /**
          * Animation to use when the popover is presented.
         */
        "enterAnimation"?: AnimationBuilder;
        /**
          * The event to pass to the popover animation.
         */
        "event": any;
        "getParentPopover": () => Promise<HTMLIonPopoverElement | null>;
        /**
          * Additional attributes to pass to the popover.
         */
        "htmlAttributes"?: PopoverAttributes;
        /**
          * If `true`, the popover will open. If `false`, the popover will close. Use this if you need finer grained control over presentation, otherwise just use the popoverController or the `trigger` property. Note: `isOpen` will not automatically be set back to `false` when the popover dismisses. You will need to do that in your code.
         */
        "isOpen": boolean;
        /**
          * If `true`, the keyboard will be automatically dismissed when the overlay is presented.
         */
        "keyboardClose": boolean;
        /**
          * Animation to use when the popover is dismissed.
         */
        "leaveAnimation"?: AnimationBuilder;
        /**
          * The mode determines which platform styles to use.
         */
        "mode"?: "ios" | "md";
        /**
          * Returns a promise that resolves when the popover did dismiss.
         */
        "onDidDismiss": <T = any>() => Promise<OverlayEventDetail<T>>;
        /**
          * Returns a promise that resolves when the popover will dismiss.
         */
        "onWillDismiss": <T = any>() => Promise<OverlayEventDetail<T>>;
        "overlayIndex": number;
        /**
          * Present the popover overlay after it has been created. Developers can pass a mouse, touch, or pointer event to position the popover relative to where that event was dispatched.
         */
        "present": (event?: MouseEvent | TouchEvent | PointerEvent | undefined) => Promise<void>;
        /**
          * When opening a popover from a trigger, we should not be modifying the `event` prop from inside the component. Additionally, when pressing the "Right" arrow key, we need to shift focus to the first descendant in the newly presented popover.
         */
        "presentFromTrigger": (event?: any, focusDescendant?: boolean) => Promise<void>;
        /**
          * Describes what to position the popover relative to. If `'trigger'`, the popover will be positioned relative to the trigger button. If passing in an event, this is determined via event.target. If `'event'`, the popover will be positioned relative to the x/y coordinates of the trigger action. If passing in an event, this is determined via event.clientX and event.clientY.
         */
        "reference": PositionReference;
        /**
          * If `true`, a backdrop will be displayed behind the popover.
         */
        "showBackdrop": boolean;
        /**
          * Describes which side of the `reference` point to position the popover on. The `'start'` and `'end'` values are RTL-aware, and the `'left'` and `'right'` values are not.
         */
        "side": PositionSide;
        /**
          * Describes how to calculate the popover width. If `'cover'`, the popover width will match the width of the trigger. If `'auto'`, the popover width will be determined by the content in the popover.
         */
        "size": PopoverSize;
        /**
          * If `true`, the popover will be translucent. Only applies when the mode is `"ios"` and the device supports [`backdrop-filter`](https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter#Browser_compatibility).
         */
        "translucent": boolean;
        /**
          * An ID corresponding to the trigger element that causes the popover to open. Use the `trigger-action` property to customize the interaction that results in the popover opening.
         */
        "trigger": string | undefined;
        /**
          * Describes what kind of interaction with the trigger that should cause the popover to open. Does not apply when the `trigger` property is `undefined`. If `'click'`, the popover will be presented when the trigger is left clicked. If `'hover'`, the popover will be presented when a pointer hovers over the trigger. If `'context-menu'`, the popover will be presented when the trigger is right clicked on desktop and long pressed on mobile. This will also prevent your device's normal context menu from appearing.
         */
        "triggerAction": TriggerAction;
    }
    interface GicSelect {
        /**
          * The text to display on the cancel button.
         */
        "cancelText": string;
        /**
          * A property name or function used to compare object values
         */
        "compareWith"?: string | SelectCompareFn | null;
        /**
          * If `true`, the user cannot interact with the select.
         */
        "disabled": boolean;
        /**
          * The interface the select should use: `action-sheet`, `popover` or `alert`.
         */
        "interface": SelectInterface;
        /**
          * Any additional options that the `alert`, `action-sheet` or `popover` interface can take. See the [AlertController API docs](../../alert/AlertController/#create), the [ActionSheetController API docs](../../action-sheet/ActionSheetController/#create) and the [PopoverController API docs](../../popover/PopoverController/#create) for the create options for each interface.
         */
        "interfaceOptions": any;
        /**
          * If `true`, the select can accept multiple values.
         */
        "multiple": boolean;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name": string;
        /**
          * The text to display on the ok button.
         */
        "okText": string;
        /**
          * Opens the select overlay, it could be an alert, action-sheet or popover, based in `gic-select` settings.
         */
        "open": (ev?: UIEvent | undefined) => Promise<any>;
        /**
          * The text to display when the select is empty.
         */
        "placeholder"?: string | null;
        /**
          * If `true`, the select will show a searchbar for radios and checkboxes
         */
        "searchBar": boolean;
        /**
          * The text to display instead of the selected option's value.
         */
        "selectedText"?: string | null;
        /**
          * If `true`, the buttons list will be rendered in a virtual scroll
         */
        "useVirtualScroll": boolean;
        /**
          * the value of the select.
         */
        "value"?: any | null;
    }
    interface GicSelectOption {
        /**
          * If `true`, the user cannot interact with the select option.
         */
        "disabled": boolean;
        /**
          * The text value of the option.
         */
        "value"?: any | null;
    }
    interface GicSelectPopover {
        /**
          * Header text for the popover
         */
        "header"?: string;
        /**
          * Text for popover body
         */
        "message"?: string;
        /**
          * Array of options for the popover
         */
        "options": SelectPopoverOption[];
        /**
          * If `true`, the select popover will show a searchbar for radios and checkboxes
         */
        "searchBar": boolean;
        /**
          * The current search string
         */
        "searchString"?: string | null;
        /**
          * Subheader text for the popover
         */
        "subHeader"?: string;
        /**
          * If `true`, the select popover will use a virtual scroll to render radios and checkboxes
         */
        "useVirtualScroll": boolean;
    }
}
declare global {
    interface HTMLGicActionSheetElement extends Components.GicActionSheet, HTMLStencilElement {
    }
    var HTMLGicActionSheetElement: {
        prototype: HTMLGicActionSheetElement;
        new (): HTMLGicActionSheetElement;
    };
    interface HTMLGicAlertElement extends Components.GicAlert, HTMLStencilElement {
    }
    var HTMLGicAlertElement: {
        prototype: HTMLGicAlertElement;
        new (): HTMLGicAlertElement;
    };
    interface HTMLGicAutocompleteElement extends Components.GicAutocomplete, HTMLStencilElement {
    }
    var HTMLGicAutocompleteElement: {
        prototype: HTMLGicAutocompleteElement;
        new (): HTMLGicAutocompleteElement;
    };
    interface HTMLGicAutocompleteOptionElement extends Components.GicAutocompleteOption, HTMLStencilElement {
    }
    var HTMLGicAutocompleteOptionElement: {
        prototype: HTMLGicAutocompleteOptionElement;
        new (): HTMLGicAutocompleteOptionElement;
    };
    interface HTMLGicAutocompletePopoverElement extends Components.GicAutocompletePopover, HTMLStencilElement {
    }
    var HTMLGicAutocompletePopoverElement: {
        prototype: HTMLGicAutocompletePopoverElement;
        new (): HTMLGicAutocompletePopoverElement;
    };
    interface HTMLGicPopoverElement extends Components.GicPopover, HTMLStencilElement {
    }
    var HTMLGicPopoverElement: {
        prototype: HTMLGicPopoverElement;
        new (): HTMLGicPopoverElement;
    };
    interface HTMLGicSelectElement extends Components.GicSelect, HTMLStencilElement {
    }
    var HTMLGicSelectElement: {
        prototype: HTMLGicSelectElement;
        new (): HTMLGicSelectElement;
    };
    interface HTMLGicSelectOptionElement extends Components.GicSelectOption, HTMLStencilElement {
    }
    var HTMLGicSelectOptionElement: {
        prototype: HTMLGicSelectOptionElement;
        new (): HTMLGicSelectOptionElement;
    };
    interface HTMLGicSelectPopoverElement extends Components.GicSelectPopover, HTMLStencilElement {
    }
    var HTMLGicSelectPopoverElement: {
        prototype: HTMLGicSelectPopoverElement;
        new (): HTMLGicSelectPopoverElement;
    };
    interface HTMLElementTagNameMap {
        "gic-action-sheet": HTMLGicActionSheetElement;
        "gic-alert": HTMLGicAlertElement;
        "gic-autocomplete": HTMLGicAutocompleteElement;
        "gic-autocomplete-option": HTMLGicAutocompleteOptionElement;
        "gic-autocomplete-popover": HTMLGicAutocompletePopoverElement;
        "gic-popover": HTMLGicPopoverElement;
        "gic-select": HTMLGicSelectElement;
        "gic-select-option": HTMLGicSelectOptionElement;
        "gic-select-popover": HTMLGicSelectPopoverElement;
    }
}
declare namespace LocalJSX {
    interface GicActionSheet {
        /**
          * If `true`, the action sheet will animate.
         */
        "animated"?: boolean;
        /**
          * If `true`, the action sheet will be dismissed when the backdrop is clicked.
         */
        "backdropDismiss"?: boolean;
        /**
          * An array of buttons for the action sheet.
         */
        "buttons"?: (ActionSheetButton | string)[];
        /**
          * Additional classes to apply for custom CSS. If multiple classes are provided they should be separated by spaces.
         */
        "cssClass"?: string | string[];
        /**
          * Animation to use when the action sheet is presented.
         */
        "enterAnimation"?: AnimationBuilder;
        /**
          * Title for the action sheet.
         */
        "header"?: string;
        /**
          * If `true`, the keyboard will be automatically dismissed when the overlay is presented.
         */
        "keyboardClose"?: boolean;
        /**
          * Animation to use when the action sheet is dismissed.
         */
        "leaveAnimation"?: AnimationBuilder;
        /**
          * Emitted after the alert has dismissed.
         */
        "onIonActionSheetDidDismiss"?: (event: CustomEvent<OverlayEventDetail>) => void;
        /**
          * Emitted after the alert has presented.
         */
        "onIonActionSheetDidPresent"?: (event: CustomEvent<void>) => void;
        /**
          * Emitted before the alert has dismissed.
         */
        "onIonActionSheetWillDismiss"?: (event: CustomEvent<OverlayEventDetail>) => void;
        /**
          * Emitted before the alert has presented.
         */
        "onIonActionSheetWillPresent"?: (event: CustomEvent<void>) => void;
        "overlayIndex": number;
        /**
          * If `true`, the action sheet will show a searchbar for radios and checkboxes
         */
        "searchBar"?: boolean;
        /**
          * The current search string
         */
        "searchString"?: string | null;
        /**
          * Subtitle for the action sheet.
         */
        "subHeader"?: string;
        /**
          * If `true`, the action sheet will be translucent. Only applies when the mode is `"ios"` and the device supports [`backdrop-filter`](https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter#Browser_compatibility).
         */
        "translucent"?: boolean;
        /**
          * If `true`, the action sheet will use a virtual scroll to render radios and checkboxes
         */
        "useVirtualScroll"?: boolean;
    }
    interface GicAlert {
        /**
          * If `true`, the alert will animate.
         */
        "animated"?: boolean;
        /**
          * If `true`, the alert will be dismissed when the backdrop is clicked.
         */
        "backdropDismiss"?: boolean;
        /**
          * Array of buttons to be added to the alert.
         */
        "buttons"?: (AlertButton | string)[];
        /**
          * Additional classes to apply for custom CSS. If multiple classes are provided they should be separated by spaces.
         */
        "cssClass"?: string | string[];
        /**
          * Animation to use when the alert is presented.
         */
        "enterAnimation"?: AnimationBuilder;
        /**
          * The main title in the heading of the alert.
         */
        "header"?: string;
        /**
          * Array of input to show in the alert.
         */
        "inputs"?: AlertInput[];
        /**
          * If `true`, the keyboard will be automatically dismissed when the overlay is presented.
         */
        "keyboardClose"?: boolean;
        /**
          * Animation to use when the alert is dismissed.
         */
        "leaveAnimation"?: AnimationBuilder;
        /**
          * The main message to be displayed in the alert. `message` can accept either plaintext or HTML as a string. To display characters normally reserved for HTML, they must be escaped. For example `<Ionic>` would become `&lt;Ionic&gt;`  For more information: [Security Documentation](https://ionicframework.com/docs/faq/security)
         */
        "message"?: string;
        /**
          * The mode determines which platform styles to use.
         */
        "mode"?: "ios" | "md";
        /**
          * Emitted after the alert has dismissed.
         */
        "onGicAlertDidDismiss"?: (event: CustomEvent<OverlayEventDetail>) => void;
        /**
          * Emitted after the alert has presented.
         */
        "onGicAlertDidPresent"?: (event: CustomEvent<void>) => void;
        /**
          * Emitted before the alert has dismissed.
         */
        "onGicAlertWillDismiss"?: (event: CustomEvent<OverlayEventDetail>) => void;
        /**
          * Emitted before the alert has presented.
         */
        "onGicAlertWillPresent"?: (event: CustomEvent<void>) => void;
        "overlayIndex": number;
        /**
          * If `true`, the alert will show a searchbar for radios and checkboxes
         */
        "searchBar"?: boolean;
        /**
          * The current search string
         */
        "searchString"?: string | null;
        /**
          * The subtitle in the heading of the alert. Displayed under the title.
         */
        "subHeader"?: string;
        /**
          * If `true`, the alert will be translucent. Only applies when the mode is `"ios"` and the device supports [`backdrop-filter`](https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter#Browser_compatibility).
         */
        "translucent"?: boolean;
        /**
          * If `true`, the alert will use a virtual scroll to render radios and checkboxes
         */
        "useVirtualScroll"?: boolean;
    }
    interface GicAutocomplete {
        /**
          * Any additional options that the `popover` interface can take. See the [PopoverController API docs](../../popover/PopoverController/#create) for the create options for each interface.
         */
        "interfaceOptions"?: any;
        "placeholder"?: string;
        "value"?: string | null;
    }
    interface GicAutocompleteOption {
        /**
          * Emitted when the autocomplete option loads.
         */
        "onIonAutocompleteOptionDidLoad"?: (event: CustomEvent<void>) => void;
        /**
          * Emitted when the autocomplete option unloads.
         */
        "onIonAutocompleteOptionDidUnload"?: (event: CustomEvent<void>) => void;
        /**
          * The text value of the option.
         */
        "value"?: any | null;
    }
    interface GicAutocompletePopover {
        /**
          * Array of options for the popover
         */
        "options"?: AutocompletePopoverOption[];
        "searchStr"?: string;
    }
    interface GicPopover {
        /**
          * Describes how to align the popover content with the `reference` point.
         */
        "alignment"?: PositionAlign;
        /**
          * If `true`, the popover will animate.
         */
        "animated"?: boolean;
        /**
          * If `true`, the popover will display an arrow that points at the `reference` when running in `ios` mode on mobile. Does not apply in `md` mode or on desktop.
         */
        "arrow"?: boolean;
        /**
          * If `true`, the popover will be dismissed when the backdrop is clicked.
         */
        "backdropDismiss"?: boolean;
        /**
          * The component to display inside of the popover. You only need to use this if you are not using a JavaScript framework. Otherwise, you can just slot your component inside of `ion-popover`.
         */
        "component"?: ComponentRef;
        /**
          * The data to pass to the popover component. You only need to use this if you are not using a JavaScript framework. Otherwise, you can just set the props directly on your component.
         */
        "componentProps"?: ComponentProps;
        /**
          * Additional classes to apply for custom CSS. If multiple classes are provided they should be separated by spaces.
         */
        "cssClass"?: string | string[];
        "delegate"?: FrameworkDelegate;
        /**
          * If `true`, the popover will be automatically dismissed when the content has been clicked.
         */
        "dismissOnSelect"?: boolean;
        /**
          * Animation to use when the popover is presented.
         */
        "enterAnimation"?: AnimationBuilder;
        /**
          * The event to pass to the popover animation.
         */
        "event"?: any;
        /**
          * Additional attributes to pass to the popover.
         */
        "htmlAttributes"?: PopoverAttributes;
        /**
          * If `true`, the popover will open. If `false`, the popover will close. Use this if you need finer grained control over presentation, otherwise just use the popoverController or the `trigger` property. Note: `isOpen` will not automatically be set back to `false` when the popover dismisses. You will need to do that in your code.
         */
        "isOpen"?: boolean;
        /**
          * If `true`, the keyboard will be automatically dismissed when the overlay is presented.
         */
        "keyboardClose"?: boolean;
        /**
          * Animation to use when the popover is dismissed.
         */
        "leaveAnimation"?: AnimationBuilder;
        /**
          * The mode determines which platform styles to use.
         */
        "mode"?: "ios" | "md";
        /**
          * Emitted after the popover has dismissed. Shorthand for ionPopoverDidDismiss.
         */
        "onDidDismiss"?: (event: CustomEvent<OverlayEventDetail>) => void;
        /**
          * Emitted after the popover has presented. Shorthand for ionPopoverWillDismiss.
         */
        "onDidPresent"?: (event: CustomEvent<void>) => void;
        /**
          * Emitted after the popover has dismissed.
         */
        "onIonPopoverDidDismiss"?: (event: CustomEvent<OverlayEventDetail>) => void;
        /**
          * Emitted after the popover has presented.
         */
        "onIonPopoverDidPresent"?: (event: CustomEvent<void>) => void;
        /**
          * Emitted before the popover has dismissed.
         */
        "onIonPopoverWillDismiss"?: (event: CustomEvent<OverlayEventDetail>) => void;
        /**
          * Emitted before the popover has presented.
         */
        "onIonPopoverWillPresent"?: (event: CustomEvent<void>) => void;
        /**
          * Emitted before the popover has dismissed. Shorthand for ionPopoverWillDismiss.
         */
        "onWillDismiss"?: (event: CustomEvent<OverlayEventDetail>) => void;
        /**
          * Emitted before the popover has presented. Shorthand for ionPopoverWillPresent.
         */
        "onWillPresent"?: (event: CustomEvent<void>) => void;
        "overlayIndex": number;
        /**
          * Describes what to position the popover relative to. If `'trigger'`, the popover will be positioned relative to the trigger button. If passing in an event, this is determined via event.target. If `'event'`, the popover will be positioned relative to the x/y coordinates of the trigger action. If passing in an event, this is determined via event.clientX and event.clientY.
         */
        "reference"?: PositionReference;
        /**
          * If `true`, a backdrop will be displayed behind the popover.
         */
        "showBackdrop"?: boolean;
        /**
          * Describes which side of the `reference` point to position the popover on. The `'start'` and `'end'` values are RTL-aware, and the `'left'` and `'right'` values are not.
         */
        "side"?: PositionSide;
        /**
          * Describes how to calculate the popover width. If `'cover'`, the popover width will match the width of the trigger. If `'auto'`, the popover width will be determined by the content in the popover.
         */
        "size"?: PopoverSize;
        /**
          * If `true`, the popover will be translucent. Only applies when the mode is `"ios"` and the device supports [`backdrop-filter`](https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter#Browser_compatibility).
         */
        "translucent"?: boolean;
        /**
          * An ID corresponding to the trigger element that causes the popover to open. Use the `trigger-action` property to customize the interaction that results in the popover opening.
         */
        "trigger"?: string | undefined;
        /**
          * Describes what kind of interaction with the trigger that should cause the popover to open. Does not apply when the `trigger` property is `undefined`. If `'click'`, the popover will be presented when the trigger is left clicked. If `'hover'`, the popover will be presented when a pointer hovers over the trigger. If `'context-menu'`, the popover will be presented when the trigger is right clicked on desktop and long pressed on mobile. This will also prevent your device's normal context menu from appearing.
         */
        "triggerAction"?: TriggerAction;
    }
    interface GicSelect {
        /**
          * The text to display on the cancel button.
         */
        "cancelText"?: string;
        /**
          * A property name or function used to compare object values
         */
        "compareWith"?: string | SelectCompareFn | null;
        /**
          * If `true`, the user cannot interact with the select.
         */
        "disabled"?: boolean;
        /**
          * The interface the select should use: `action-sheet`, `popover` or `alert`.
         */
        "interface"?: SelectInterface;
        /**
          * Any additional options that the `alert`, `action-sheet` or `popover` interface can take. See the [AlertController API docs](../../alert/AlertController/#create), the [ActionSheetController API docs](../../action-sheet/ActionSheetController/#create) and the [PopoverController API docs](../../popover/PopoverController/#create) for the create options for each interface.
         */
        "interfaceOptions"?: any;
        /**
          * If `true`, the select can accept multiple values.
         */
        "multiple"?: boolean;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name"?: string;
        /**
          * The text to display on the ok button.
         */
        "okText"?: string;
        /**
          * Emitted when the select loses focus.
         */
        "onIonBlur"?: (event: CustomEvent<void>) => void;
        /**
          * Emitted when the selection is cancelled.
         */
        "onIonCancel"?: (event: CustomEvent<void>) => void;
        /**
          * Emitted when the value has changed.
         */
        "onIonChange"?: (event: CustomEvent<SelectChangeEventDetail>) => void;
        /**
          * Emitted when the select has focus.
         */
        "onIonFocus"?: (event: CustomEvent<void>) => void;
        /**
          * Emitted when the styles change.
         */
        "onIonStyle"?: (event: CustomEvent<StyleEventDetail>) => void;
        /**
          * The text to display when the select is empty.
         */
        "placeholder"?: string | null;
        /**
          * If `true`, the select will show a searchbar for radios and checkboxes
         */
        "searchBar"?: boolean;
        /**
          * The text to display instead of the selected option's value.
         */
        "selectedText"?: string | null;
        /**
          * If `true`, the buttons list will be rendered in a virtual scroll
         */
        "useVirtualScroll"?: boolean;
        /**
          * the value of the select.
         */
        "value"?: any | null;
    }
    interface GicSelectOption {
        /**
          * If `true`, the user cannot interact with the select option.
         */
        "disabled"?: boolean;
        /**
          * The text value of the option.
         */
        "value"?: any | null;
    }
    interface GicSelectPopover {
        /**
          * Header text for the popover
         */
        "header"?: string;
        /**
          * Text for popover body
         */
        "message"?: string;
        /**
          * Array of options for the popover
         */
        "options"?: SelectPopoverOption[];
        /**
          * If `true`, the select popover will show a searchbar for radios and checkboxes
         */
        "searchBar"?: boolean;
        /**
          * The current search string
         */
        "searchString"?: string | null;
        /**
          * Subheader text for the popover
         */
        "subHeader"?: string;
        /**
          * If `true`, the select popover will use a virtual scroll to render radios and checkboxes
         */
        "useVirtualScroll"?: boolean;
    }
    interface IntrinsicElements {
        "gic-action-sheet": GicActionSheet;
        "gic-alert": GicAlert;
        "gic-autocomplete": GicAutocomplete;
        "gic-autocomplete-option": GicAutocompleteOption;
        "gic-autocomplete-popover": GicAutocompletePopover;
        "gic-popover": GicPopover;
        "gic-select": GicSelect;
        "gic-select-option": GicSelectOption;
        "gic-select-popover": GicSelectPopover;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "gic-action-sheet": LocalJSX.GicActionSheet & JSXBase.HTMLAttributes<HTMLGicActionSheetElement>;
            "gic-alert": LocalJSX.GicAlert & JSXBase.HTMLAttributes<HTMLGicAlertElement>;
            "gic-autocomplete": LocalJSX.GicAutocomplete & JSXBase.HTMLAttributes<HTMLGicAutocompleteElement>;
            "gic-autocomplete-option": LocalJSX.GicAutocompleteOption & JSXBase.HTMLAttributes<HTMLGicAutocompleteOptionElement>;
            "gic-autocomplete-popover": LocalJSX.GicAutocompletePopover & JSXBase.HTMLAttributes<HTMLGicAutocompletePopoverElement>;
            "gic-popover": LocalJSX.GicPopover & JSXBase.HTMLAttributes<HTMLGicPopoverElement>;
            "gic-select": LocalJSX.GicSelect & JSXBase.HTMLAttributes<HTMLGicSelectElement>;
            "gic-select-option": LocalJSX.GicSelectOption & JSXBase.HTMLAttributes<HTMLGicSelectOptionElement>;
            "gic-select-popover": LocalJSX.GicSelectPopover & JSXBase.HTMLAttributes<HTMLGicSelectPopoverElement>;
        }
    }
}
